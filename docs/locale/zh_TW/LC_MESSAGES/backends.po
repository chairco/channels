# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, test
# This file is distributed under the same license as the test package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: test 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-02-26 15:46+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (Taiwan) (https://www.transifex.com/django-channels-tw-docs/teams/72101/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../backends.rst:2
msgid "Channel Layer Types"
msgstr ""

#: ../../backends.rst:4
msgid ""
"Multiple choices of backend are available, to fill different tradeoffs of "
"complexity, throughput and scalability. You can also write your own backend "
"if you wish; the spec they confirm to is called :doc:`ASGI <asgi>`. Any "
"ASGI-compliant channel layer can be used."
msgstr ""

#: ../../backends.rst:10
msgid "Redis"
msgstr ""

#: ../../backends.rst:12
msgid ""
"The Redis layer is the recommended backend to run Channels with, as it "
"supports both high throughput on a single Redis server as well as the "
"ability to run against a set of Redis servers in a sharded mode."
msgstr ""

#: ../../backends.rst:16
msgid ""
"To use the Redis layer, simply install it from PyPI (it lives in a separate "
"package, as we didn't want to force a dependency on the redis-py for the "
"main install)::"
msgstr ""

#: ../../backends.rst:22
msgid ""
"By default, it will attempt to connect to a Redis server on "
"``localhost:6379``, but you can override this with the ``hosts`` key in its "
"config::"
msgstr ""

#: ../../backends.rst:36
msgid "Sharding"
msgstr ""

#: ../../backends.rst:38
msgid ""
"The sharding model is based on consistent hashing - in particular, "
":ref:`response channels <channel-types>` are hashed and used to pick a "
"single Redis server that both the interface server and the worker will use."
msgstr ""

#: ../../backends.rst:42
msgid ""
"For normal channels, since any worker can service any channel request, "
"messages are simply distributed randomly among all possible servers, and "
"workers will pick a single server to listen to. Note that if you run more "
"Redis servers than workers, it's very likely that some servers will not have"
" workers listening to them; we recommend you always have at least ten "
"workers for each Redis server to ensure good distribution. Workers will, "
"however, change server periodically (every five seconds or so) so queued "
"messages should eventually get a response."
msgstr ""

#: ../../backends.rst:50
msgid ""
"Note that if you change the set of sharding servers you will need to restart"
" all interface servers and workers with the new set before anything works, "
"and any in-flight messages will be lost (even with persistence, some will); "
"the consistent hashing model relies on all running clients having the same "
"settings. Any misconfigured interface server or worker will drop some or all"
" messages."
msgstr ""

#: ../../backends.rst:59
msgid "IPC"
msgstr ""

#: ../../backends.rst:61
msgid ""
"The IPC backend uses POSIX shared memory segments and semaphores in order to"
" allow different processes on the same machine to communicate with each "
"other."
msgstr ""

#: ../../backends.rst:64
msgid ""
"As it uses shared memory, it does not require any additional servers running"
" to get working, and is quicker than any network-based channel layer. "
"However, it can only run between processes on the same machine."
msgstr ""

#: ../../backends.rst:69
msgid ""
"The IPC layer only communicates between processes on the same machine, and "
"while you might initially be tempted to run a cluster of machines all with "
"their own IPC-based set of processes, this will result in groups not working"
" properly; events sent to a group will only go to those channels that joined"
" the group on the same machine. This backend is for single-machine "
"deployments only."
msgstr ""

#: ../../backends.rst:78
msgid "In-memory"
msgstr ""

#: ../../backends.rst:80
msgid ""
"The in-memory layer is only useful when running the protocol server and the "
"worker server in a single process; the most common case of this is "
"``runserver``, where a server thread, this channel layer, and worker thread "
"all co-exist inside the same python process."
msgstr ""

#: ../../backends.rst:85
msgid ""
"Its path is ``asgiref.inmemory.ChannelLayer``. If you try and use this "
"channel layer with ``runworker``, it will exit, as it does not support "
"cross-process communication."
msgstr ""

#: ../../backends.rst:91
msgid "Writing Custom Channel Layers"
msgstr ""

#: ../../backends.rst:93
msgid ""
"The interface channel layers present to Django and other software that "
"communicates over them is codified in a specification called :doc:`ASGI "
"<asgi>`."
msgstr ""

#: ../../backends.rst:96
msgid ""
"Any channel layer that conforms to the :doc:`ASGI spec <asgi>` can be used "
"by Django; just set ``BACKEND`` to the class to instantiate and ``CONFIG`` "
"to a dict of keyword arguments to initialize the class with."
msgstr ""
