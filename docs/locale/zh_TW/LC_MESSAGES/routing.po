# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, test
# This file is distributed under the same license as the test package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: test 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-02-26 15:46+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (Taiwan) (https://www.transifex.com/django-channels-tw-docs/teams/72101/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../routing.rst:2
msgid "Routing"
msgstr ""

#: ../../routing.rst:4
msgid ""
"Routing in Channels is done using a system similar to that in core Django; a"
" list of possible routes is provided, and Channels goes through all routes "
"until a match is found, and then runs the resulting consumer."
msgstr ""

#: ../../routing.rst:8
msgid ""
"The difference comes, however, in the fact that Channels has to route based "
"on more than just URL; channel name is the main thing routed on, and URL "
"path is one of many other optional things you can route on, depending on the"
" protocol (for example, imagine email consumers - they would route on domain"
" or recipient address instead)."
msgstr ""

#: ../../routing.rst:14
msgid ""
"The routing Channels takes is just a list of *routing objects* - the three "
"built in ones are ``route``, ``route_class`` and ``include``, but any object"
" that implements the routing interface will work:"
msgstr ""

#: ../../routing.rst:18
msgid ""
"A method called ``match``, taking a single ``message`` as an argument and "
"returning ``None`` for no match or a tuple of ``(consumer, kwargs)`` if "
"matched."
msgstr ""

#: ../../routing.rst:21
msgid ""
"A method called ``channel_names``, which returns a set of channel names that"
" will match, which is fed to the channel layer to listen on them."
msgstr ""

#: ../../routing.rst:24
msgid "The three default routing objects are:"
msgstr ""

#: ../../routing.rst:26
msgid ""
"``route``: Takes a channel name, a consumer function, and optional filter "
"keyword arguments."
msgstr ""

#: ../../routing.rst:29
msgid ""
"``route_class``: Takes a class-based consumer, and optional filter keyword "
"arguments. Channel names are taken from the consumer's ``channel_names()`` "
"method."
msgstr ""

#: ../../routing.rst:33
msgid ""
"``include``: Takes either a list or string import path to a routing list, "
"and optional filter keyword arguments."
msgstr ""

#: ../../routing.rst:39
msgid "Filters"
msgstr ""

#: ../../routing.rst:41
msgid ""
"Filtering is how you limit matches based on, for example, URLs; you use "
"regular expressions, like so::"
msgstr ""

#: ../../routing.rst:47
msgid ""
"Unlike Django's URL routing, which strips the first slash of a URL for "
"neatness, Channels includes the first slash, as the routing system is "
"generic and not designed just for URLs."
msgstr ""

#: ../../routing.rst:51
msgid "You can have multiple filters::"
msgstr ""

#: ../../routing.rst:55
msgid ""
"Multiple filters are always combined with logical AND; that is, you need to "
"match every filter to have the consumer called."
msgstr ""

#: ../../routing.rst:58
msgid ""
"Filters can capture keyword arguments to be passed to your function or your "
"class based consumer methods as a ``kwarg``::"
msgstr ""

#: ../../routing.rst:62
msgid "You can also specify filters on an ``include``::"
msgstr ""

#: ../../routing.rst:66
msgid ""
"When you specify filters on ``include``, the matched portion of the "
"attribute is removed for matches inside the include; for example, this "
"arrangement matches URLs like ``/liveblog/stream/``, because the outside "
"``include`` strips off the ``/liveblog`` part it matches before passing it "
"inside::"
msgstr ""

#: ../../routing.rst:79
msgid ""
"You can also include named capture groups in the filters on an include and "
"they'll be passed to the consumer just like those on ``route``; note, "
"though, that if the keyword argument names from the ``include`` and the "
"``route`` clash, the values from ``route`` will take precedence."
msgstr ""
